@mixin generate-padding-classes($property, $steps) {
  $directions: (
    t: top,
    b: bottom,
    l: left,
    r: right,
    y: top bottom,
    x: left right,
  );
  @each $step in $steps {
    $class_name: "#{$property}-#{$step}";
    .#{$class_name} {
      padding: $step * $STEP;
    }
  }
  @each $key, $value in $directions {
    @each $step in $steps {
      $class_name: "#{$property}#{$key}-#{$step}";
      .#{$class_name} {
        @if $key == "y" or $key == "x" {
          padding-top: if($key == "y", $step * $STEP, null) !important;
          padding-bottom: if($key == "y", $step * $STEP, null) !important;
          padding-left: if($key == "x", $step * $STEP, null) !important;
          padding-right: if($key == "x", $step * $STEP, null) !important;
        } @else {
          padding-#{$value}: $step * $STEP !important;
        }
      }
    }
  }
}
@mixin generate-margin-classes($property, $steps) {
  $directions: (
    t: top,
    b: bottom,
    l: left,
    r: right,
    y: top bottom,
    x: left right,
  );

  // @each $key, $value in $directions {
  //   @each $step in $steps {
  //     $class_name: "#{$property}#{$key}-#{$step}";
  //     .#{$class_name} {
  //       @if $key == "y" or $key == "x" {
  //         margin-top: if($key == "y", $step * $STEP, null);
  //         margin-bottom: if($key == "y", $step * $STEP, null);
  //         margin-left: if($key == "x", $step * $STEP, null);
  //         margin-right: if($key == "x", $step * $STEP, null);
  //       } @else {
  //         margin-#{$value}: $step * $STEP;
  //       }
  //     }
  //   }
  // }
  @each $key, $value in $directions {
    @each $step in $steps {
      $class_name: "#{$property}#{$key}-#{$step}";
      .#{$class_name} {
        @if $key == "y" or $key == "x" {
          margin-top: if($key == "y", $step * $STEP, null);
          margin-bottom: if($key == "y", $step * $STEP, null);
          margin-left: if($key == "x", $step * $STEP, null);
          margin-right: if($key == "x", $step * $STEP, null);
        } @else {
          margin-#{$value}: $step * $STEP;
        }
      }

      // Генерация классов с брейкпоинтами
      // @each $bp, $width in $breakpoints {
      //   $bp_class_name: "#{$property}#{$key}-#{$bp}-#{$step}";
      //   @media (min-width: $width) {
      //     .#{$bp_class_name} {
      //       @if $key == "y" or $key == "x" {
      //         margin-top: if($key == "y", $step * $STEP, null);
      //         margin-bottom: if($key == "y", $step * $STEP, null);
      //         margin-left: if($key == "x", $step * $STEP, null);
      //         margin-right: if($key == "x", $step * $STEP, null);
      //       } @else {
      //         margin-#{$value}: $step * $STEP;
      //       }
      //     }
      //   }
      // }
    }
  }
  @each $key, $value in $directions {
    @each $step in $steps {
      $class_name: "#{$property}#{$key}-#{$step}";
      @each $bp, $width in $breakpoints {
        $bp_class_name: "#{$property}#{$key}-#{$bp}-#{$step}";
        @media (min-width: $width) {
          .#{$bp_class_name} {
            @if $key == "y" or $key == "x" {
              margin-top: if($key == "y", $step * $STEP, null);
              margin-bottom: if($key == "y", $step * $STEP, null);
              margin-left: if($key == "x", $step * $STEP, null);
              margin-right: if($key == "x", $step * $STEP, null);
            } @else {
              margin-#{$value}: $step * $STEP;
            }
          }
        }
      }
    }
  }
}

@mixin abs-position($top: 0px, $right: null, $bottom: null, $left: null) {
  $right: if($right == null, $top, $right);
  $bottom: if($bottom == null, $top, $bottom);
  $left: if($left == null, $right, $left);
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin breakpoint($min-size, $max-size) {
  $min-width: map-get($breakpoints, $min-size);
  $max-width: map-get($breakpoints, $max-size);

  @media (min-width: $min-width) and (max-width: $max-width - 1px) {
    @content;
  }
}

@mixin minBreakpoint($size) {
  $min-width: map-get($breakpoints, $size);

  @media (min-width: $min-width) {
    @content;
  }
}

@mixin minMaxBreakpoint($min-size, $max-size) {
  $min-width: map-get($breakpoints, $min-size);
  $max-width: map-get($breakpoints, $max-size);

  @media (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

@mixin maxBreakpoint($size) {
  $max-width: map-get($breakpoints, $size);

  @media (max-width: $max-width - 1px) {
    @content;
  }
}

// @mixin generate-display-classes($display-value) {
//   .d-#{$display-value} {
//     display: #{$display-value} !important;
//   }
//   @each $breakpoint, $width in $breakpoints {
//     $class-name: unquote("d-#{$breakpoint}-#{$display-value}");

//     @media (min-width: $width) {
//       .#{$class-name} {
//         display: #{$display-value} !important;
//       }
//     }
//   }
// }
@mixin generate-display-classes($display-values...) {
  @each $display-value in $display-values {
    .d-#{$display-value} {
      display: #{$display-value} !important;
    }
  }
  @each $display-value in $display-values {
    @each $breakpoint, $width in $breakpoints {
      $class-name: unquote("d-#{$breakpoint}-#{$display-value}");
      @media (min-width: $width) {
        .#{$class-name} {
          display: #{$display-value} !important;
        }
      }
    }
  }
}
